#!/usr/bin/env bash
# Brian Chrzanowski
# 2020-09-23 10:59:17
#
# Brian's Work Script (to make kla projects managable)
#
# TODO (Brian)
# 1a. make something to symlink all (or most) config files to a single file / single directory
# 1b. make something to undo it (git probably won't like the config thing)
# 2a. make a thing to scaffold components, probably with tabs, with some sed expressions
# 2b. potentially a small interface to read sed commands + apply them
# 2c. make a small menu / selector with the shit you want in your component / module

DOTNETEF="dotnet-ef"
BUILDITEMS="$HOME/.builditems"
BUILDSTATE="$HOME/.buildstate"
CONTAINERFILE="$HOME/.containers"

# usage
function usage
{
	echo "USAGE : " $(basename $0) "<push|azlogin|pop|update|mostrecent|buildall|newdb>"
	exit 1
}

function err
{
	echo "ERR: $@"
}

function wrn
{
	echo "WRN: $@"
}

function gr
{
	git rev-parse --show-toplevel
}

# azlogin : does the azure cli login thingy
function azlogin
{
	if [ -z "$AZUSER" ] || [ -z "$AZPASS" ]; then
		err "you must set both \$AZUSER and \$AZPASS with your username and password respectively to login to azure" ; exit 1
	fi 

	az login -u $AZUSER -p $AZPASS
	az acr login --name kunzleigh
}

# reap : reaps everything to be sown (kills all terrible, lingering processes)
function reap
{
	sudo pkill -9 dotnet
	sudo pkill -9 ng
	sudo pkill -9 node
}

# clearstate : clears the build(s) state
function clearstate
{
	rm -f $BUILDSTATE
	touch $BUILDSTATE
}

# hasstatestr : (hopefully) returns true-ish if the string is in the state file
function hasstatestr
{
	[ $(grep $1 $BUILDSTATE | wc -l) -gt 0 ] && true || false
}

# addstatestr : adds a single string to the state
function addstatestr
{
	echo "$1" >> $BUILDSTATE
}

# buildall : builds all of the apps (for water)
function buildall
{
	# NOTE (Brian) this function reads off of the file setup above in BUILDITEMS
	# the format is as follows
	#
	#   command;state string;dir from root
	#
	# So let's say I need to run 'make' from my 'build/' directory. You'd configure that like so:
	#
	#   make;build-part-1;build/
	#
	# and this function will:
	#
	# 1. cd to build/
	# 2. run the command 'make'
	# 3. put the string 'build-part-1' into the BUILDSTATE file, if the command from 2 completes
	#
	# You should probably know the directory you reference is from the _root_ of your _git_ repo.
	#
	# Oh, also, you probably want to be careful what command you stuff in here because we sure
	# do use eval. Your mileage may vary.

	if [ ! -f "$BUILDITEMS" ]; then
		err "You need to create the file '$BUILDITEMS' before you can use this command"
		exit 1
	fi

	CURRHASH=$(git rev-parse HEAD)

	if [ ! -f "$BUILDSTATE" ] || ( ! hasstatestr $CURRHASH ); then
		clearstate
		addstatestr "$CURRHASH"
	fi

	pushd $(gr)

	while IFS= read -r line;
	do
		bcmd=$(echo "$line" | awk -F';' '{print $1}')
		bstr=$(echo "$line" | awk -F';' '{print $2}')
		bdir=$(echo "$line" | awk -F';' '{print $3}')

		[ -z "$bcmd" ] || [ -z "$bstr" ] || [ -z "$bdir" ] && continue

		if ( ! hasstatestr "$bstr" ); then
			pushd $bdir
			eval $bcmd
			if [ $? -ne 0 ]; then
				err "'$bcmd' issue! Exited with code $?"
				exit 1;
			fi
			addstatestr "$bstr"
			popd
		fi

	done < "$BUILDITEMS"

	popd # $(gr)
}

# update : updates the database to the most recent version
function update
{
	${DOTNETEF} database update
}

# push : pushes a migration onto the stack
function push
{
	${DOTNETEF} migrations add $1
}

# pop : removes the migration on top of the stack
function pop
{
	${DOTNETEF} migrations remove --force
}

# mostrecent : opens the most recent migration
function mostrecent
{
	$EDITOR Migrations/$(ls -lc Migrations/ | tail -n3 | head -n1 | grep -oE '[^ ]+$')
}

# listmigrations : lists the 5 most recent migrations
function listmigrations
{
	ls -lc Migrations/ | grep -v "Designer.cs$" | grep -v "DbContextModelSnapshot.cs$" | tail -n7
}

# resetcontainer : resets the container
function resetcontainer
{
	# NOTE (brian)
	# $1 - name
	# $2 - port string (remapping)
	# $3 - address(?)

	docker stop "$1"
	docker rm "$1"
	docker run -u 0:0 -p "$2" -v $HOME/shared:/shared -d --name "$1" "$3"
}

# newdb : starts up a new database
function newdb
{
	# NOTE (Brian) input file format
	#
	# container_name;portremapping;container_remote

	if [ ! -f "$CONTAINERFILE" ]; then
		err "You need to create the file '$CONTAINERFILE' before you can use this command"
		exit 1
	fi

	while IFS= read -r line;
	do
		cname=$(echo "$line" | awk -F';' '{print $1}')
		cport=$(echo "$line" | awk -F';' '{print $2}')
		cremote=$(echo "$line" | awk -F';' '{print $3}')

		# we skip over lines that aren't formatted properly
		# if you have a funky issue, my guess is it's here
		[ -z "$cname" ] && continue
		[ -z "$cport" ] && continue
		[ -z "$cremote" ] && continue

		resetcontainer "$cname" "$cport" "$cremote"
	done < "$CONTAINERFILE"
}

if [ "$#" -eq 0 ]; then
	usage
fi

while (( "$#" ))
do
	cmd="$1"
	arg="$2"

	case "$cmd" in
		"push")
			push $arg;
			shift
		;;
		"pop")
			pop
		;;
		"update")
			update
		;;
		"mostrecent")
			mostrecent
		;;
		"listmigrations")
			listmigrations
		;;
		"buildall")
			buildall
		;;
		"reap")
			reap
		;;
		"azlogin")
			azlogin
		;;
		"newdb")
			newdb
		;;
		*)
			usage
		;;
	esac

	shift
done

